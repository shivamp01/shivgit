Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.

C:\Users\ibmjavafsdmr11>mongo
MongoDB shell version v4.2.7
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("0bf42efe-22fc-40c3-a260-e12c74dc29c3") }
MongoDB server version: 4.2.7
Server has startup warnings:
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten]
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> ^C
bye

C:\Users\ibmjavafsdmr11>mongo
MongoDB shell version v4.2.7
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("3cde4945-ccc5-4498-bb89-4145cce63591") }
MongoDB server version: 4.2.7
Server has startup warnings:
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten]
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2021-04-04T10:46:45.903+0530 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> use test;
switched to db test
> db.emp.insert(1,"shivam",30000);
2021-04-07T09:47:45.281+0530 E  QUERY    [js] Error: argument to bsonsize has to be an object :
addToOperationsList@src/mongo/shell/bulk_api.js:607:28
Bulk/this.insert@src/mongo/shell/bulk_api.js:650:20
DBCollection.prototype.insert@src/mongo/shell/collection.js:313:13
@(shell):1:1
> db.emp.insert({roll:1,name:"shivam",salary:30000});
WriteResult({ "nInserted" : 1 })
> db.show()
2021-04-07T09:48:46.624+0530 E  QUERY    [js] uncaught exception: TypeError: db.show is not a function :
@(shell):1:1
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
test    0.000GB
> use people
switched to db people
> db
people
> db.createCollection('person')
{ "ok" : 1 }
> show collections
person
> db.person.insert({name:"polo",age:"21"})
WriteResult({ "nInserted" : 1 })
> db.person
people.person
> db.person.show()
2021-04-07T09:58:27.336+0530 E  QUERY    [js] uncaught exception: TypeError: db.person.show is not a function :
@(shell):1:1
> db.person.find()
{ "_id" : ObjectId("606d34e05e76e1798f26c7e0"), "name" : "polo", "age" : "21" }
> db.person.insert([{name:"jack",age : 23},{name : "marry",age : 53,gender:"female"}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.person.find()
{ "_id" : ObjectId("606d34e05e76e1798f26c7e0"), "name" : "polo", "age" : "21" }
{ "_id" : ObjectId("606d355e5e76e1798f26c7e1"), "name" : "jack", "age" : 23 }
{ "_id" : ObjectId("606d355e5e76e1798f26c7e2"), "name" : "marry", "age" : 53, "gender" : "female" }
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : "21"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e2"),
        "name" : "marry",
        "age" : 53,
        "gender" : "female"
}
> db.person.update({name:"polo"},{name:"polo",age 23,gender:"male"})
2021-04-07T10:07:16.894+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:48
> db.person.update({name:"polo"},{name:"polo",age: 23,gender:"male"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e2"),
        "name" : "marry",
        "age" : 53,
        "gender" : "female"
}
> db.person.update({name:"jack"}{$set:{gender:"male"}})
2021-04-07T10:10:14.020+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:30
> db.person.update({name:"jack"},{$set:{gender:"male"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.persons.find().pretty(0
... )
> db.persons.find().pretty()
> db.persons.find()
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e2"),
        "name" : "marry",
        "age" : 53,
        "gender" : "female"
}
> db.person.remove({name:"marry"})
WriteResult({ "nRemoved" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
> db.person.insert({name:"marry",age:35})
WriteResult({ "nInserted" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
> db.person.update({name:"jane"},{name:"jane",age:25})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
> db.person.update({name:"jane"},{name:"jane",age:25},{upsert:true})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("606d39eccc4092c3d407e439")
})
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
{
        "_id" : ObjectId("606d39eccc4092c3d407e439"),
        "name" : "jane",
        "age" : 25
}
> db.person.update(name:"jane",{$set:{city:"fairfax",gender:"male"}})
2021-04-07T10:20:38.397+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:21
> db.person.update({name:"jane"},{$set:{city:"fairfax",gender:"male"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
{
        "_id" : ObjectId("606d39eccc4092c3d407e439"),
        "name" : "jane",
        "age" : 25,
        "city" : "fairfax",
        "gender" : "male"
}
> db.person.update({name:"jane"},{$unset:{city:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
{
        "_id" : ObjectId("606d39eccc4092c3d407e439"),
        "name" : "jane",
        "age" : 25,
        "gender" : "male"
}
> db.person.update({name:"marry"},{$rename:{"gender":"sex"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
{
        "_id" : ObjectId("606d39eccc4092c3d407e439"),
        "name" : "jane",
        "age" : 25,
        "gender" : "male"
}
> db.person.update({name:"jane"},{$rename:{"gender":"sex"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.person.find().pretty()
{
        "_id" : ObjectId("606d34e05e76e1798f26c7e0"),
        "name" : "polo",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d355e5e76e1798f26c7e1"),
        "name" : "jack",
        "age" : 23,
        "gender" : "male"
}
{
        "_id" : ObjectId("606d39355e76e1798f26c7e3"),
        "name" : "marry",
        "age" : 35
}
{
        "_id" : ObjectId("606d39eccc4092c3d407e439"),
        "name" : "jane",
        "age" : 25,
        "sex" : "male"
}
> db.createCollection('customers')
{ "ok" : 1 }
> show collections
customers
person
> db
people
> db.customers.insert({name:"Sean",address:{street:"main street",city:"pune"},subscription:["sub1","sub2"]})
WriteResult({ "nInserted" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
> db.customers.insertMany([{name:"shivam",address:{street:"wadgaon road",city:"yavatmal"}},{name:"sumit",address:{street:"khamgaon",city:"Buldhana"}}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("606d3d6f5e76e1798f26c7e5"),
                ObjectId("606d3d6f5e76e1798f26c7e6")
        ]
}
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        }
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        }
}
> db.customers.update({name:"shivam"},{$set:{subscription:["sub3","sub4","sub5"]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        }
}
> db.customers.update({name:"sumit",{$set:{subs:["hostart","jio"]}}})
2021-04-07T10:38:23.016+0530 E  QUERY    [js] uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:34
> db.customers.update({name:"sumit"},{$set:{subs:["hostart","jio"]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subs" : [
                "hostart",
                "jio"
        ]
}
> db.customers.update({name:"sumit"},{$rename:{"subs":"subscription"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio"
        ]
}
> db.customers.update({name:"rohan"},{name:"rohan",age:24,gender:"female"})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.customers.update({name:"rohan"},{name:"rohan",age:24,gender:"female"},{$upsert:true})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio"
        ]
}
> db.customers.update({name:"rohan"},{name:"rohan",age:24,gender:"female"},{$upsert:true})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.customers.update({name:"rohan"},{name:"rohan",age:24,gender:"female"},{upsert:true})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("606d3f62cc4092c3d407e485")
})
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "female"
}
> db.customers.update({name:"rohan"},{$set:{gender:"male"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:"sumit"},{$set:{subscription:$push{"amazon prime"}})
...
... ^C

> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:"sumit"},{$push:{subscription:"amazon prime"})
... ^C

> db.customers.update({name:"sumit"},{$push:{subscription:["amazon prime"]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostart",
                "jio",
                [
                        "amazon prime"
                ]
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:"sumit"},{$unset:{subscription:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        }
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:"sumit"},{$set:{subscription:["hostar","jio"]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:"sumit"},{$push:{subscription:"amazon"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:sumit},{$set:{address.city:"amravati"}})
2021-04-07T11:14:42.629+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:47
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:sumit},{$set:{address.$.city:"amravati"}})
2021-04-07T11:16:24.582+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:47
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:sumit},{$set:{"address.$.city":"amravati"}})
2021-04-07T11:16:59.415+0530 E  QUERY    [js] uncaught exception: ReferenceError: sumit is not defined :
@(shell):1:22
> db.customers.update({name:sumit},{$set:{"address.city":"amravati"}})
2021-04-07T11:17:30.895+0530 E  QUERY    [js] uncaught exception: ReferenceError: sumit is not defined :
@(shell):1:22
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.update({name:sumit},{$set:{"address.$.city":"amravati"}})
2021-04-07T11:18:50.082+0530 E  QUERY    [js] uncaught exception: ReferenceError: sumit is not defined :
@(shell):1:22
> db.customers.update({name:sumit},{$set:{address.city:"amravati"}})
2021-04-07T11:19:14.223+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:47
> db.customers.update({name:sumit},{$set:{$address.city:"amravati"}})
2021-04-07T11:19:19.282+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:48
> db.customers.update({name:sumit.address},{$set:{$address.city:"amravati"}})
2021-04-07T11:20:19.023+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:56
> db.customers.find(name:"Jean").pretty()
2021-04-07T11:30:57.789+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:22
> db.customers.find({name:"Jean"}).pretty()
> db.customers.find({name:"Jean"}).pretty()
> db.customers.find({name:"Jean"}).pretty();
> db.customers.find().pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.find({name:"Sean"}).pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
> db.customers.find($or:[{name:"Sean"},{name:"shivam"}]).pretty();
2021-04-07T11:33:04.060+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:21
> db.customers.find({$or:[{name:"Sean"},{name:"shivam"}]}).pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
> db.customers.find({$and:[{name:"Sean"},{name:"shivam"}]}).pretty();
> db.customers.find({$or:[{name:"Sean"},{name:"angel"}]}).pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
> db.customers.find({$or:[{name:"Sean"},{name:"shivam"}]}).pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
> db.customers.find({$and:[{name:"Sean"},{name:"shivam"}]}).pretty();
> db.customers.find({[{name:"Sean"},{name:"shivam"}]}).pretty();
2021-04-07T11:37:50.011+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ] in computed property name :
@(shell):1:33
> db.customers.find({{name:"Sean"},{name:"shivam"}}).pretty();
2021-04-07T11:37:58.285+0530 E  QUERY    [js] uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:19
> db.customers.find({$and:[{name:"Sean"},{name:"shivam"}]}).pretty();
> db.customers.find({$and:[{name:"Sean"},{subscription:["sub1","sub2"]}]}).pretty();
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
> db.customers.find({$and:[{name:"Sean"},{address.city:"fairware"}]}).pretty();
2021-04-07T11:40:29.092+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing : after property id :
@(shell):1:47
> db.customers.find({$and:[{name:"Sean"},{"address.city":"fairware"}]}).pretty();
> db.customers.find()
{ "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"), "name" : "Sean", "address" : { "street" : "main street", "city" : "pune" }, "subscription" : [ "sub1", "sub2" ] }
{ "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"), "name" : "shivam", "address" : { "street" : "wadgaon road", "city" : "yavatmal" }, "subscription" : [ "sub3", "sub4", "sub5" ] }
{ "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"), "name" : "sumit", "address" : { "street" : "khamgaon", "city" : "Buldhana" }, "subscription" : [ "hostar", "jio", "amazon" ] }
{ "_id" : ObjectId("606d3f62cc4092c3d407e485"), "name" : "rohan", "age" : 24, "gender" : "male" }
> db.customers.find({$and:[{name:"shivam"},{"address.city":"fairware"}]}).pretty();
> db.customers.find({$and:[{name:"shivam"},{"address.city":"yavatmal"}]}).pretty();
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
> db.persons.sort(name:1)
2021-04-07T11:43:07.194+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :
@(shell):1:20
> db.persons.sort({name:1})
2021-04-07T11:43:14.423+0530 E  QUERY    [js] uncaught exception: TypeError: db.persons.sort is not a function :
@(shell):1:1
> db.persons.find().sort({name:1})
> db.person.find.sort({name:1})
2021-04-07T11:43:47.515+0530 E  QUERY    [js] uncaught exception: TypeError: db.person.find.sort is not a function :
@(shell):1:1
> db.person.find().sort({name:1})
{ "_id" : ObjectId("606d355e5e76e1798f26c7e1"), "name" : "jack", "age" : 23, "gender" : "male" }
{ "_id" : ObjectId("606d39eccc4092c3d407e439"), "name" : "jane", "age" : 25, "sex" : "male" }
{ "_id" : ObjectId("606d39355e76e1798f26c7e3"), "name" : "marry", "age" : 35 }
{ "_id" : ObjectId("606d34e05e76e1798f26c7e0"), "name" : "polo", "age" : 23, "gender" : "male" }
> db.person.find().sort({name:-1})
{ "_id" : ObjectId("606d34e05e76e1798f26c7e0"), "name" : "polo", "age" : 23, "gender" : "male" }
{ "_id" : ObjectId("606d39355e76e1798f26c7e3"), "name" : "marry", "age" : 35 }
{ "_id" : ObjectId("606d39eccc4092c3d407e439"), "name" : "jane", "age" : 25, "sex" : "male" }
{ "_id" : ObjectId("606d355e5e76e1798f26c7e1"), "name" : "jack", "age" : 23, "gender" : "male" }
> db.person.find().count()
4
> db.person.find({"address.city":""pune}).count()
2021-04-07T11:47:12.698+0530 E  QUERY    [js] uncaught exception: SyntaxError: missing } after property list :
@(shell):1:33
> db.person.find({"address.city":"pune"}).count()
0
> db.customers.find({"address.city":"pune"}).count()
1
> db.customers.find({"address.city":"pune"}).pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
> db.customers.find({$age:{$gt:20}}).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $age",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.customers.find({age:{$gt:20}}).pretty()
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.customers.find({age:{$gt:20}}).count()
1
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Buldhana"
        },
        "subscription" : [
                "hostar",
                "jio",
                "amazon"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male"
}
> db.createCollection("demo")
{ "ok" : 1 }
> show collections
customers
demo
person
> db.demo.drop()
true
> show collections
customers
person
> db.createCollection("demo")
{ "ok" : 1 }
> db.demo.rename("temp")
2021-04-07T11:52:23.499+0530 E  QUERY    [js] uncaught exception: TypeError: db.demo.rename is not a function :
@(shell):1:1
> db.demo.renameCollection("temp")
{ "ok" : 1 }
> show collections
customers
person
temp
> db.temp.remove()
2021-04-07T11:53:02.695+0530 E  QUERY    [js] uncaught exception: Error: remove needs a query :
DBCollection.prototype._parseRemove@src/mongo/shell/collection.js:357:15
DBCollection.prototype.remove@src/mongo/shell/collection.js:384:18
@(shell):1:1
> db.temp.drop()
true
> show collections
customers
person
> db.customers.find().limit(2);
{ "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"), "name" : "Sean", "address" : { "street" : "main street", "city" : "pune" }, "subscription" : [ "sub1", "sub2" ] }
{ "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"), "name" : "shivam", "address" : { "street" : "wadgaon road", "city" : "yavatmal" }, "subscription" : [ "sub3", "sub4", "sub5" ] }
> db.createUser({user:"shivam",pwd:"mongo",roles:["readWrite","dbAdmin"]})
Successfully added user: { "user" : "shivam", "roles" : [ "readWrite", "dbAdmin" ] }
> show collections
Employee
customers
person
> db.customers.find().pretty()
{
        "_id" : ObjectId("606d3ccc5e76e1798f26c7e4"),
        "name" : "Sean",
        "address" : {
                "street" : "main street",
                "city" : "pune"
        },
        "subscription" : [
                "sub1",
                "sub2"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e5"),
        "name" : "shivam",
        "address" : {
                "street" : "wadgaon road",
                "city" : "yavatmal"
        },
        "subscription" : [
                "sub3",
                "sub4",
                "sub5"
        ]
}
{
        "_id" : ObjectId("606d3d6f5e76e1798f26c7e6"),
        "name" : "sumit",
        "address" : {
                "street" : "khamgaon",
                "city" : "Shegaon"
        },
        "subscription" : [
                "hostar",
                "jio tv",
                "amazon prime"
        ]
}
{
        "_id" : ObjectId("606d3f62cc4092c3d407e485"),
        "name" : "rohan",
        "age" : 24,
        "gender" : "male",
        "Subscription" : [
                "Netflix",
                "Prime",
                "Zee5"
        ]
}
>